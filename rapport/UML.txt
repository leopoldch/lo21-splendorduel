@startuml class Sac {
  - nb:int - max:int - tokens:Token[]
}

class Tirage {
  - level:int - nb:int - max:int - cartes:Cartes *[max] - pioche:Pioche *

}

class Plateau {
  - nb:int - max:int - tokens:Token *[][] - bag:Sac *
}

class Token {

  - id:int

}

class Jeton_gemme {

  - type:enum<blue, red, green, white, black>
}

class Jeton_or {

}

class Jeton_perle {

}

class Privilege {
  - id:int
}

class Card {
  - capacity:capacity{nullable} - prestige_points:int {
    nullable
  }
}

class JewelryCard {
  - white_cost:int -
          blue_cost:int - green_cost:int - red_cost:int - black_cost:int -
         perl_cost:int - level:int - nb_couronnes:int[0, 3] -
      color_bonus:enum<blue, white, red, green, black, multiple> -
       bonus_number:int[0, 2] - est_reservee:bool
}

class RoyalCard {

}

class Joueur {
  - name:str -
              points_number:int - crown_number:int - jewelry_cards_number:int -
            royal_cards_number:int - privilege_number:int - max_nb_privileges:int -
          max_nb_jetons:int - max_nb_cartes_r:int - cartes_j:JewelryCard *[] -
               cartes_r:RoyalCard *[] - tokens:Token[] -
             privileges:Privilege *[]
}

class Jeu {
  - is_finished:bool - est_contre_AI:bool - who_plays:Joueur - opponent:Joueur
}

class Pioche {
  - level:int - nb:int - max:int - cartes:Cartes *[max]

}

        Sac o-- "0..*" Token : sont présents dans >

                               Plateau o-- "0..*" Token
    : sont sur >

      Joueur o-- l "0..3" Privilege : détienir > Joueur o-- "0..3" JewelryCard
    : réserver > Joueur o-- "0..*" JewelryCard
    : posséder > Joueur o-- "0..10" Token
    : posséder > Joueur o-- "0..2" RoyalCard : posséder >

                                               Pioche "1" --"*" JewelryCard
    : contenir >

      Tirage "1" --lo JewelryCard : contenir<

                                        Joueur-- * Jeu : composer> Jeu *
                                    --"1" Plateau : contenir >
      Jeu * --r "1" Sac : contenir > Jeu * --"67" Card : contenir >
      Jeu * --"0..3" Privilege : contenir > Jeu * --"1..*" Token : contenir >
      JewelryCard-- ^
    Card RoyalCard-- ^
    Card

        Jeton_or-- u ^
    Token Jeton_gemme-- u ^ Token Jeton_perle-- u ^
    Token

        Token : str
                getId() const Token : bool getDispo() const

                                      Joueur : int getPoints() const Joueur
    : int setPoints() Joueur : int getCouronnes() const Joueur
    : int setCouronnes() Joueur : JewelryCard *getCartesJ() const Joueur
    : RoyalCard *getCartesR() const Joueur : void acheterCarte() const Joueur
    : void mettreJetonDansSac() Joueur : void printCartesJ() const Joueur
    : void printCartesR() const Joueur : void piocherJeton() const Joueur
    : void prendrePrivilege() Joueur : int getPrivilege() Joueur
    : void obtenirCarteRoyale() const

      Card : Capacity getCapacity() const Card : int getPrestige() const Card
    : void getCarte() const

      JewelryCard : int getCostWhite() const JewelryCard
    : int getCostGreen() const JewelryCard : int getCostRed() const JewelryCard
    : int getCostBlack() const JewelryCard : int getCostPerl() const JewelryCard
    : void setCouts() JewelryCard : int getCouronnes() const JewelryCard
    : color_bonus getBonusCouleur() const JewelryCard
    : int getBonusNombre() const

      Jeu : Joueur &getTour() const Jeu : void tourSuivant()

                                              Jeton_gemme
    : enum getCouleur() const Jeton_gemme : void SetCouleur() const

                                            Plateau : void remplir_sac()

                                                          Tirage
    : void piocher() Tirage : Tirage &getTirage() const @enduml
