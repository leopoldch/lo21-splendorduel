@startuml class Sac {
  - nb:int - max:int - tokens:const Token *[] - handler_sac:static Handler_sac
}

class Tirage {
  - nb_max_tirages:static const int;
  - nb_tirages:static int;
  - level:const int -
       cards_number:int - max_cartse:int -
          cartes:vector<const Cartes_joaillerie *> - pioche:Pioche &
}

class Plateau {
  - nb:int -
                  max:int - tokens:const Token *[] -
      handler_plateau:static Handler_plateau
}

class Token {
  - id:int -
        couleur:enum<blue, red, green, white, black, or, perl> -
       perl_number:static int - max_perle:static const int - gold_number:static int -
         max_or:static const int - green_number:static int -
       max_vert:static const int - red_number:static int -
      max_rouge:static const int - blue_number:static int -
       max_bleu:static const int - white_number:static int -
      max_blanc:static const int - black_number:static int -
       max_noir:static const int
}

class Privilege {
  - id:const int - instanceCount:static int - maxInstances:static const int
}

class Card {
  - capacity:const Capacity{nullable} - prestige_points:const int {
    nullable
  }
}

class JewelryCard {
  - white_cost:const int -
          blue_cost:const int - green_cost:const int - red_cost:const int -
          black_cost:const int - perl_cost:const int - level:const int -
       nb_couronnes:const int[0, 3] -
      color_bonus:const enum<blue, white, red, green, black, multiple> -
       bonus_number:const int[0, 2]
}

class RoyalCard {
}

class Joueur {
  - name:str -
              points_number:int - crown_number:int - jewelry_cards_number:int -
            royal_cards_number:int - privilege_number:int - max_nb_privileges:int -
          max_nb_jetons:int - max_nb_cartes_r:int - cartes_j:JewelryCard *[] -
               cartes_r:RoyalCard *[] - tokens:Token[] -
             privileges:Privilege *[]
}

class Jeu {
  - is_finished:bool - est_contre_AI:bool - who_plays:Joueur - opponent:Joueur
}

class Pioche {
  - level:const int -
       nb_pioches:static int - max_pioches:static const int -
           pioche:vector<const Cartes_joaillerie *>
}

class SplendorException {
  - info:std::string
}
  

  Sac  o-- "0..*"Token : sont présents dans >
  
  Plateau o-- "0..*" Token : sont sur >
  
  Joueur o--l "0..3" Privilege : détienir >
  Joueur o-- "0..3" JewelryCard : réserver >
  Joueur o-- "0..*" JewelryCard : posséder >
  Joueur o-- "0..10" Token : posséder >
  Joueur o-- "0..2" RoyalCard : posséder >
  
  Pioche "1" -- "*" JewelryCard : contenir >

  Tirage "1" --lo JewelryCard : contenir <

  Joueur --* Jeu : composer >
  Jeu *-- "1" Plateau : contenir >
  Jeu *--r "1"Sac : contenir >
  Jeu *-- "67" Card : contenir >
  Jeu *-- "0..3" Privilege : contenir >
  Jeu *-- "1..*" Token : contenir >
  JewelryCard --^ Card
  RoyalCard --^ Card



  Token : const int get_id() const
  Token : static int getNbMaxJetons()
  Token : \~Token()
  Token : Token(id:int, couleur:enum)

  Sac : Sac()
  Sac : \~Sac()
  Sac : static Sac& get_sac()
  Sac : static void libere_sac()
  Sac : void init_sac()

  Privilege : - Privilege()
  Privilege : const int get_id() const
  Privilege : static int getCount()
  Privilege : static Privilege* GetInstance()

  Joueur : int getPoints() const
  Joueur : int setPoints()
  Joueur : int getCouronnes() const
  Joueur : int setCouronnes()
  Joueur : JewelryCard* getCartesJ() const
  Joueur : RoyalCard* getCartesR() const
  Joueur : void acheterCarte() const
  Joueur : void mettreJetonDansSac()
  Joueur : void printCartesJ() const
  Joueur : void printCartesR() const
  Joueur : void piocherJeton() const
  Joueur : void prendrePrivilege()
  Joueur : int getPrivilege()
  Joueur : void obtenirCarteRoyale() const
  
  Card : const Capacity& getCapacity() const
  Card : int getPrestige() const
  Card : \Card)
  Card : Card(capacity : Capacity, prestige_points : int)
  
  JewelryCard : const int getCostWhite() const
  JewelryCard : const int getCostGreen() const
  JewelryCard : const int getCostRed() const
  JewelryCard : const int getCostBlack() const
  JewelryCard : const int getCostPerl() const
  JewelryCard : const int getNiveau() const
  JewelryCard : const int getNbCrown() const
  JewelryCard : const colorBonus& getBonus() const
  JewelryCard : const int getNbBonus() const

  RoyalCard : RoyalCard(capacity : Capacity, prestige_points : int)
  
  Jeu : Joueur& getTour() const
  Jeu : void tourSuivant()
  
  Plateau : Plateau(max:int)
  Plateau : \~Plateau()
  Plateau : static Plateau& get_plateau()
  Plateau : static void libere_plateau()
  Plateau : const Token* get_plateau_i(i:int) const
  Plateau : void set_plateau_i(i:int, jet: const Token*)
  Plateau : const Token* get_droite_i(i:int) const
  Plateau : const Token* get_gauche_i(i:int) const
  Plateau : const Token* get_dessous_i(i:int) const
  Plateau : const Token* get_dessus_i(i:int) const
  Plateau : void printTab() const
  
  Tirage : Tirage(niv : int, max : int, p : Pioche&)
  Tirage : \~Tirage()
  Tirage : void remplirTirage()
  Tirage : Pioche& getPioche() const
  Tirage : vector<const JewelryCard*> getTirage() const
  Tirage : const int getNiveau() const
  Tirage : const int getCardsNumber() const

  Pioche : Pioche(niv : int)
  Pioche : \~Pioche()
  Pioche : bool est_vide()
  Pioche : const int getNiveau() const
  Pioche : vector<const JewelryCard*> getPioche() const
  Pioche : static int getNbPioches()
  Pioche : static void remplirPioche(p1 : Pioche*, p2 : Pioche*, p3 : Pioche*, cartes : vector<const JewelryCard*>&)

  SplendorException : SplendorException(str const std::string&)
  SplendorException : std::string getInfo() const
@enduml
